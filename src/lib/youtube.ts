export interface YouTubeVideo {
  id: string
  title: string
  description: string
  thumbnail: string
  channelId: string
  channelTitle: string
  publishedAt: string
}

export interface YouTubeSearchResult {
  videos: YouTubeVideo[]
  nextPageToken?: string
}

const API_KEY = process.env.NEXT_PUBLIC_YOUTUBE_API_KEY

export async function searchYouTubeVideos(
  query: string,
  maxResults: number = 12,
  pageToken?: string
): Promise<YouTubeSearchResult> {
  try {
    const url = new URL('https://www.googleapis.com/youtube/v3/search')
    url.searchParams.set('part', 'snippet')
    url.searchParams.set('q', query)
    url.searchParams.set('type', 'video')
    url.searchParams.set('maxResults', maxResults.toString())
    url.searchParams.set('key', API_KEY!)
    
    if (pageToken) {
      url.searchParams.set('pageToken', pageToken)
    }

    const response = await fetch(url.toString())
    const data = await response.json()

    if (!response.ok) {
      throw new Error(data.error?.message || 'YouTube API request failed')
    }

    const videos: YouTubeVideo[] = data.items.map((item: any) => ({
      id: item.id.videoId,
      title: item.snippet.title,
      description: item.snippet.description,
      thumbnail: item.snippet.thumbnails.medium.url,
      channelId: item.snippet.channelId,
      channelTitle: item.snippet.channelTitle,
      publishedAt: item.snippet.publishedAt,
    }))

    return {
      videos,
      nextPageToken: data.nextPageToken,
    }
  } catch (error) {
    console.error('YouTube search error:', error)
    throw error
  }
}

export interface Caption {
  id: string
  language: string
  name: string
  isAutoGenerated: boolean
}

export async function getVideoCaptions(videoId: string): Promise<Caption[]> {
  try {
    const url = new URL('https://www.googleapis.com/youtube/v3/captions')
    url.searchParams.set('part', 'snippet')
    url.searchParams.set('videoId', videoId)
    url.searchParams.set('key', API_KEY!)

    const response = await fetch(url.toString())
    const data = await response.json()

    if (!response.ok) {
      throw new Error(data.error?.message || 'YouTube Captions API request failed')
    }

    return data.items.map((item: any) => ({
      id: item.id,
      language: item.snippet.language,
      name: item.snippet.name,
      isAutoGenerated: item.snippet.trackKind === 'ASR',
    }))
  } catch (error) {
    console.error('YouTube captions error:', error)
    return []
  }
}
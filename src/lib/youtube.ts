export interface YouTubeVideo {
  id: string
  title: string
  description: string
  thumbnail: string
  channelId: string
  channelTitle: string
  publishedAt: string
}

export interface YouTubeSearchResult {
  videos: YouTubeVideo[]
  nextPageToken?: string
}

// サーバーサイドAPIを使用（安全）
export async function searchYouTubeVideos(
  query: string,
  maxResults: number = 12,
  pageToken?: string
): Promise<YouTubeSearchResult> {
  try {
    console.log(`YouTube動画検索: "${query}"`)
    
    const url = new URL('/api/youtube/search', window.location.origin)
    url.searchParams.set('q', query)
    url.searchParams.set('maxResults', maxResults.toString())
    
    if (pageToken) {
      url.searchParams.set('pageToken', pageToken)
    }

    const response = await fetch(url.toString())
    const data = await response.json()

    if (!response.ok) {
      throw new Error(data.error || 'YouTube検索に失敗しました')
    }

    console.log(`YouTube動画検索完了: ${data.videos?.length || 0}件`)
    return data
  } catch (error) {
    console.error('YouTube動画検索エラー:', error)
    throw error
  }
}

export interface Caption {
  id: string
  language: string
  name: string
  isAutoGenerated: boolean
}

// サーバーサイドAPIを使用（安全）
export async function getVideoCaptions(videoId: string): Promise<Caption[]> {
  try {
    console.log(`YouTube字幕情報取得: ${videoId}`)
    
    const response = await fetch(`/api/youtube/captions/${videoId}`)
    const data = await response.json()

    if (!response.ok) {
      throw new Error(data.error || 'YouTube字幕情報の取得に失敗しました')
    }

    console.log(`YouTube字幕情報取得完了: ${data.captions?.length || 0}件`)
    return data.captions || []
  } catch (error) {
    console.error('YouTube字幕情報取得エラー:', error)
    return []
  }
}
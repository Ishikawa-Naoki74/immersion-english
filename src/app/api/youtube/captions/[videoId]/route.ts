import { NextRequest, NextResponse } from 'next/server'

export interface Caption {
  id: string
  language: string
  name: string
  isAutoGenerated: boolean
}

export async function GET(
  request: NextRequest,
  { params }: { params: { videoId: string } }
) {
  try {
    const { videoId } = params

    console.log(`YouTube字幕情報取得: ${videoId}`)

    if (!videoId) {
      return NextResponse.json(
        { error: '動画IDが必要です' },
        { status: 400 }
      )
    }

    const API_KEY = process.env.YOUTUBE_API_KEY

    if (!API_KEY) {
      console.error('YouTube API キーが設定されていません')
      return NextResponse.json(
        { error: 'YouTube API キーが設定されていません' },
        { status: 500 }
      )
    }

    const url = new URL('https://www.googleapis.com/youtube/v3/captions')
    url.searchParams.set('part', 'snippet')
    url.searchParams.set('videoId', videoId)
    url.searchParams.set('key', API_KEY)

    console.log('YouTube Captions API呼び出し中...')

    const response = await fetch(url.toString(), {
      signal: AbortSignal.timeout(30000) // 30秒タイムアウト
    })

    const data = await response.json()

    if (!response.ok) {
      console.error('YouTube Captions API エラー:', data.error)
      return NextResponse.json(
        { 
          error: 'YouTube Captions API リクエストに失敗しました',
          details: data.error?.message || '不明なエラー'
        },
        { status: response.status }
      )
    }

    const captions: Caption[] = data.items.map((item: any) => ({
      id: item.id,
      language: item.snippet.language,
      name: item.snippet.name,
      isAutoGenerated: item.snippet.trackKind === 'ASR',
    }))

    console.log(`字幕情報取得完了: ${captions.length}件`)

    return NextResponse.json({
      videoId,
      captions,
      hasSubtitles: captions.length > 0
    })

  } catch (error) {
    console.error('YouTube字幕情報取得エラー:', error)
    return NextResponse.json(
      { 
        error: 'YouTube字幕情報の取得に失敗しました',
        details: error instanceof Error ? error.message : '不明なエラー'
      },
      { status: 500 }
    )
  }
}